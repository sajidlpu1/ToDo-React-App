{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updatedList","filter","item","input","src","logo","width","height","className","type","ClassName","placeholder","required","onChange","e","updateInput","target","onClick","addItem","disabled","length","map","key","name","checked","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,8MC0G5BC,G,wDAnGb,WAAYC,GACX,IAAD,8BACE,cAAMA,IACDC,MAAM,CACTC,QAAS,GACTC,KAAO,IAJX,E,oDASQC,GAEN,GAAiB,KAAdA,EACH,CACE,IAAMF,EAAU,CACdG,GAAKC,KAAKC,MACVC,MAAQJ,EACRK,QAAS,GAELN,EAAI,YAAOO,KAAKT,MAAME,MAE5BA,EAAKQ,KAAKT,GAGVQ,KAAKE,SAAS,CACZT,OACAD,QAAS,Q,iCAMJG,GAET,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACHW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KAEpDK,KAAKE,SAAS,CAACT,KAAOU,M,kCAGZG,GAEVN,KAAKE,SAAS,CAACV,QAAUc,M,+BAK1B,IAAD,OACE,OACE,6BACA,yBAAKC,IAAKC,IAAMC,MAAM,MAAMC,OAAO,MAAMC,UAAU,SACnD,wBAAIA,UAAU,mCAAd,YACA,yBAAKA,UAAU,yBACf,uBAAGA,UAAU,aAAb,oBADA,OAEA,2BACIC,KAAK,OAAOC,UAAU,aACtBC,YAAY,sBACZC,UAAQ,EACRjB,MAAOE,KAAKT,MAAMC,QAElBwB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOrB,UAG7C,4BACAa,UAAU,kBACVS,QAAS,kBAAM,EAAKC,QAAQ,EAAK9B,MAAMC,UACvC8B,UAAWtB,KAAKT,MAAMC,QAAQ+B,QAH9B,YAMA,yBAAKZ,UAAU,QACf,wBAAIA,UAAU,WACbX,KAAKT,MAAME,KAAK+B,KAAI,SAAAnB,GACnB,OACE,wBAAIoB,IAAKpB,EAAKV,IACd,2BACAiB,KAAK,WACLc,KAAK,SACLC,QAAStB,EAAKN,OACdiB,SAAU,eACTX,EAAKP,MACN,4BACAa,UAAU,MACVS,QAAS,kBAAM,EAAKQ,WAAWvB,EAAKV,MAFpC,sB,GAnFQkC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8dc9a8e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fb6657f9.png\";","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\n\nclass App extends React.Component\n{\n\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      newItem: \"\",\n      list : [],\n\n    }\n  }\n\n  addItem(todoValue)\n  {\n    if(todoValue !== \"\")\n    {\n      const newItem = {\n        id : Date.now(),\n        value : todoValue,\n        isDone : false,\n      };\n      const list = [...this.state.list];\n      // ... - Means append all the values into the list\n      list.push(newItem);\n\n      // Update the list\n      this.setState({\n        list , //Update list with new list\n        newItem: \"\",\n        // As the list get update with todoValue we make newItem empty for adding new item\n      });\n    }\n  }\n\n  deleteItem(id)\n  {\n    const list = [...this.state.list];\n    const updatedList = list.filter(item => item.id !== id);\n    // updatedItem filter all the item and skips the item that matches the id\n    this.setState({list : updatedList}) //to update we use setState\n  }\n\n  updateInput(input)\n  {\n    this.setState({newItem : input});\n  }\n\n\n  render()\n  {\n    return(\n      <div>\n      <img src={logo} width=\"100\" height=\"100\" className=\"logo\"/>\n      <h1 className=\"app-title center-text monospace\">ToDo App</h1>\n      <div className=\"container center-text\">\n      <b className=\"monospace\">ADD ITEM ToDo : </b>&nbsp;\n      <input\n          type=\"text\" ClassName=\"input-text\"\n          placeholder=\"Enter the Task ToDo\"\n          required\n          value={this.state.newItem}\n          //this helps us what ever we enter in input get reached to the methods that add it\n          onChange={e => this.updateInput(e.target.value)}\n          //e for any update\n          />\n      <button\n      className=\"add-btn button1\"\n      onClick={() => this.addItem(this.state.newItem)}\n      disabled={!this.state.newItem.length}\n      >Add ToDo</button>\n\n      <div className=\"list\">\n      <ul className=\"Bullets\">\n      {this.state.list.map(item =>{\n        return(\n          <li key={item.id}>\n          <input\n          type=\"checkbox\"\n          name=\"idDone\"\n          checked={item.isDone}\n          onChange={() => {}} />\n          {item.value}\n          <button\n          className=\"btn\"\n          onClick={() => this.deleteItem(item.id)}>\n          Delete\n          </button>\n\n          </li>\n        )\n      })}\n\n      </ul>\n      </div>\n      </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}